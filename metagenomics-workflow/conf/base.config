/*
 * -------------------------------------------------
 *  nf-core/mag Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus   = { check_max(      8 * task.attempt, 'cpus' )   }
  memory = { check_max(   8.GB * task.attempt, 'memory' ) }
  time   = { check_max(    2.h * task.attempt, 'time' )   }
  clusterOptions = ' --constraint=intel '
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:onecore {
    cpus   = { check_max( 1     , 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 8.h   * task.attempt, 'time' ) }
  }
  withLabel:lowmem {
    cpus   = { check_max( 8     * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time   = { check_max( 6.h   * task.attempt, 'time' ) }
  }
  withLabel:himem {
    cpus   = { check_max(     16 * task.attempt, 'cpus' ) }
    memory = { check_max( 128.GB * task.attempt, 'memory' ) }
    time   = { check_max(   24.h * task.attempt, 'time' ) }
  }
  withLabel:hicpu {
    cpus   = { check_max( 12    * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time   = { check_max( 24.h  * task.attempt, 'time' ) }
  }
  withLabel:verylong {
    time = { check_max( 48.h   * task.attempt, 'time' ) }
  }

  // Process specific

  withName: kraken2 {
    clusterOptions = ' --constraint=intel '
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    cpus          = { check_max (8     * task.attempt, 'cpus' ) }
    memory        = { check_max (96.GB * task.attempt, 'memory' ) }
    time          = { check_max (8.h   * task.attempt, 'time' ) }
  }
  withName: metaphlan {
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    cpus          = { check_max (16 * task.attempt, 'cpus' ) }
    memory        = { check_max (24.GB * task.attempt, 'memory' ) }
    time          = { check_max (8.h * task.attempt, 'time' ) }
  }

  withName: megahit {
    cpus =   { check_max (32    * task.attempt, 'cpus' ) }
    memory = { check_max (96.GB * task.attempt, 'memory' ) }
    time =   { check_max (30.h  * task.attempt, 'time' ) }
  }


  withName: metaprokka {
    clusterOptions = ' --constraint=intel '
    cpus   = { check_max (12 * task.attempt, 'cpus' ) }
    memory = { check_max (32.GB * (2**(task.attempt-1)), 'memory' ) }
    time   = { check_max (12.h * (2**(task.attempt-1)), 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,1] ? 'retry' : 'ignore' }
  }

  withName: binning {
    clusterOptions = ' --constraint=intel '
    cpus   = { check_max (12    * task.attempt, 'cpus' ) }
    memory = { check_max (24.GB * task.attempt, 'memory' ) }
    time   = { check_max (8.h   * task.attempt, 'time' ) }
  }
  withName: dastool {
    clusterOptions = ' --constraint=intel '
    cpus   = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (16.GB * task.attempt, 'memory' ) }
    time   = { check_max (8.h * task.attempt, 'time' ) }
  }

  withName: eggnog {
    clusterOptions = ' --constraint=intel '
    cpus   = { check_max (24                  , 'cpus' ) }
    memory = { check_max (64.GB * task.attempt, 'memory' ) }
    time   = { check_max (32.h  * task.attempt, 'time' ) }
  }


}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}
