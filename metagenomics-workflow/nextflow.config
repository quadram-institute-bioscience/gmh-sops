/*
 * -------------------------------------------------
 *  nf-core/mag Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  reads = "data/*{_R1,_R2}.fastq.gz"
  singleEnd = false
  outdir = './gmh-results'
  kraken2db        = '/qib/platforms/Informatics/databases/kraken2/kraken2_db_20190111/'
  kraken2gtdbk     = '/qib/platforms/Informatics/databases/kraken2/gtdbk2_bacterial'

  // Boilerplate options
  name = false
  email = false
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
//process.container = 'nfcore/mag:1.0.0'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'



profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
  vm   { includeConfig 'conf/vm.config' }
  test_hybrid { includeConfig 'conf/test_hybrid.config' }
}



// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euxo', 'pipefail']



manifest {
  name = 'gmh-virone'
  author = 'Andrea Telatin'
  homePage = 'https://github.com/'
  description = 'Assembly, binning and annotation of metagenomes'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.01.0'
  version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
